name: JavaFX CI/CD Pipeline

# When to run: on push to main branch and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Get your code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Install Java 23
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
    
    # Cache Gradle dependencies (speeds up builds)
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Make gradle wrapper executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    # Build the project
    - name: Build with Gradle
      run: ./gradlew build
    
    # Run tests
    - name: Run tests
      run: ./gradlew test
    
    # Create JavaFX distribution packages
    - name: Create JavaFX packages
      run: ./gradlew jpackage
    
    # Upload build artifacts (so you can download them)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: javafx-app-${{ github.sha }}
        path: |
          build/distributions/
          build/jpackage/
        retention-days: 30
  
  # Only run on main branch pushes
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your deployment commands here
        # For example: copy files to server, update containers, etc.
