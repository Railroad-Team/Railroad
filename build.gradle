import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.beryx.runtime' version '2.0.0'
}

group 'dev.railroadide'
version '0.0.3'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url 'https://github.com/javaterminal/terminalfx/raw/master/releases' }
    maven { url 'https://packages.jetbrains.team/maven/p/ij/intellij-dependencies' }
    maven { url 'https://maven.railroadide.dev/releases' }
    maven { url 'https://jitpack.io' }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'dev.railroadide.railroad.RailroadLauncher'
    applicationDefaultJvmArgs = [
            '-Djavafx.preloader=dev.railroadide.railroad.RailroadPreloader'
    ]
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.swing', 'javafx.web', 'javafx.fxml', 'javafx.graphics', 'javafx.media']
}

dependencies {
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.4.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome6-pack:12.4.0'
    implementation 'org.jetbrains:annotations:26.0.2-1'
    implementation 'com.google.code.gson:gson:2.13.2'
    implementation 'com.squareup.okhttp3:okhttp:5.2.1'
    implementation 'org.json:json:20250517'
    implementation 'io.github.palexdev:materialfx:11.17.0'
    implementation 'ch.qos.logback:logback-classic:1.5.20'
    implementation 'org.apache.groovy:groovy-all:5.0.2'
    implementation 'org.gradle:gradle-tooling-api:9.0.0'
    implementation 'com.panemu:tiwulfx-dock:0.5'
    implementation 'com.spencerwi:Either.java:2.9.0'
    implementation 'com.kodedu.terminalfx:terminalfx:1.2.0'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.6'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.27.1'
    implementation 'io.github.bonede:tree-sitter:0.25.3'
    implementation 'io.github.bonede:tree-sitter-java:0.23.4'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.ow2.asm:asm:9.9'
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.43.0'
    implementation 'com.github.erosb:everit-json-schema:1.14.6'
    implementation 'org.apache.commons:commons-compress:1.28.0'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'net.java.dev.jna:jna:5.18.1'
    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'

    implementation 'com.google.guava:guava:33.5.0-jre'
    implementation 'org.apache.maven:maven-core:4.0.0-rc-4'
    implementation 'org.apache.maven:maven-settings:4.0.0-rc-4'
    implementation 'org.apache.maven:maven-settings-builder:4.0.0-rc-4' // TODO: deprecated - look into this
    implementation 'org.apache.maven:maven-repository-metadata:4.0.0-rc-4'
    implementation 'org.codehaus.plexus:plexus-container-default:2.1.1'

    implementation 'dev.railroadide:java-version-extractor-plugin:1.0.0'
    implementation 'dev.railroadide:fabric-extractor-plugin:1.0.0'

    implementation 'io.get-coursier:interface:1.0.29-M1'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:7.4.0.202509020913-r'

    implementation('dev.railroadide:nsmenufx:1.0.0') {
        exclude group: 'net.java.dev.jna', module: 'jna'
    }

    implementation 'dev.railroadide:RailroadLogger:1.0.4'
    implementation 'dev.railroadide:RailroadPluginAPI:1.0.3'
    implementation project(':railroad-core')

    annotationProcessor 'org.projectlombok:lombok:1.18.42'
    compileOnly 'org.projectlombok:lombok:1.18.42'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:6.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:6.0.0'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Railroad',
                'Implementation-Version': version,
                'Main-Class': 'dev.railroadide.railroad.RailroadLauncher'
        )
    }
}

shadowJar {
    zip64 true
    mergeServiceFiles()
    manifest {
        attributes(
                'Implementation-Title': 'Railroad',
                'Implementation-Version': version,
                'Main-Class': 'dev.railroadide.railroad.RailroadLauncher'
        )
    }
}

// ---- Beryx Runtime ----
runtime {
    options = []
    modules = ['ALL-MODULE-PATH']

    launcher {
        jvmArgs = [
                '-Djavafx.preloader=dev.railroadide.railroad.RailroadPreloader'
        ]
    }

    jpackage {
        imageName = 'Railroad'
        installerName = 'Railroad'
        description = 'Railroad IDE - A Modern Java IDE for Minecraft Modding'

        def currentOs = OperatingSystem.current()
        if (!currentOs.macOsX)
            appVersion = project.version.toString()

        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        def iconPath = file("src/main/resources/assets/railroad/images/logo.$imgType").absolutePath
        imageOptions += ['--icon', iconPath]
        installerOptions += ['--vendor', 'Railroad Team']
        installerOptions += ['--copyright', 'GNU General Public License v3.0']
        installerOptions += ['--about-url', 'https://railroadide.dev']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut-prompt']
            installerOptions += ['--win-upgrade-uuid', '46af0894-7027-40b2-8772-40d5e3052c7e']
            installerOptions += ['--win-help-url', 'https://discord.turtywurty.dev/']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'Railroad']
            installerOptions += ['--linux-shortcut']
            installerOptions += ['--type', 'app-image']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'Railroad']
        }
    }
}

// Ensure the packaging tasks use the shaded jar
['jre', 'runtime', 'createRuntimeImage', 'runtimeZip', 'jpackage'].each { taskName ->
    tasks.matching { it.name == taskName }.configureEach {
        dependsOn tasks.named('shadowJar')
    }
}

tasks.matching { it.name == 'startShadowScripts' }.configureEach {
    dependsOn tasks.named('jar')
}

tasks.named('build') {
    dependsOn tasks.named('shadowJar')
}
