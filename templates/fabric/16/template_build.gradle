// fileName: defaultName
plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    <% if (mappings.channel == 'parchment') {
        out.print("\n    maven { url = 'https://maven.parchmentmc.org/' }")
    } %>
}

loom {
    <% if (props.splitSourceSets) {
        out.print("splitEnvironmentSourceSets()")
    } %>

            mods {
                <% out.print("""\"\${project.archives_base_name}\" {
            sourceSet sourceSets.main\n""")
                if (props.splitSourceSets) {
                    out.print("\n            sourceSet sourceSets.client")
                }
                out.print("\n        }") %>
            }

            <%
    if (props.useAccessWidener) {
        out.print("\n    accessWidener = file(\"src/main/resources/${props.accessWidenerPath}\")")
    } %>
}

dependencies {
    minecraft "com.mojang:minecraft:\${project.minecraft_version}"

            <%
    if (mappings.channel == 'yarn') {
        out.print("\n    mappings \"net.fabricmc:yarn:\${project.yarn_mappings}:v2\"")
    } else if (mappings.channel == 'mojmap') {
        out.print("\n    mappings loom.officialMojangMappings()")
    } else if (mappings.channel == 'parchment') {
        out.print("""\n    mappings loom.layered() {
         officialMojangMappings()
         parchment(\"org.parchmentmc.data:parchment-\${project.minecraft_version}:\${project.parchment_version}@zip\")
     }""")
    } %>

            modImplementation "net.fabricmc:fabric-loader:\${project.loader_version}"
            <%
    if (props.includeFabricApi) {
        out.print("\n    modImplementation \"net.fabricmc.fabric-api:fabric-api:\${project.fabric_version}\"")
    } %>

            // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
            // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "\${it}_\${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
