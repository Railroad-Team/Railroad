// fileName: defaultName
plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    <% if(mappings.channel == 'parchment') {
        out.print("\n    maven { url = 'https://maven.parchmentmc.org/' }")
    } %>
}

loom {
    <% if(props.splitSourceSets) {
        out.print("splitEnvironmentSourceSets()")
    } %>

    mods {
        <% out.print("""\"\${project.archives_base_name}\" {
            sourceSet sourceSets.main\n""")
        if(props.splitSourceSets) {
            out.print("\n            sourceSet sourceSets.client")
        }
        out.print("\n        }") %>
    }

    <% if(props.useAccessWidener) {
        out.print("\n    accessWidenerPath = file(\"src/main/resources/\${project.archives_base_name}.accesswidener\")")
    } %>
}

dependencies {
    minecraft "com.mojang:minecraft:\${project.minecraft_version}"

    <% if(mappings.channel == 'yarn') {
        out.print("\n    mappings \"net.fabricmc:yarn:\${project.yarn_mappings}:v2\"")
    } else if (mappings.channel == 'mojmap') {
        out.print("\n    mappings loom.officialMojangMappings()")
    } else if(mappings.channel == 'parchment') {
        out.print("""\n    mappings loom.layered() {
         officialMojangMappings()
         parchment(\"org.parchmentmc.data:parchment-\${project.minecraft_version}:\${project.parchment_version}@zip\")
     }""")
    } %>

    modImplementation "net.fabricmc:fabric-loader:\${project.loader_version}"
    <% if(props.includeFabricApi) {
        out.print("\n    modImplementation \"net.fabricmc.fabric-api:fabric-api:\${project.fabric_version}\"")
    } %>
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "\${it}_\${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        register("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}