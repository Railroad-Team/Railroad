// fileName: defaultName
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
            <%
    if (mappings.channel == 'parchment') {
        out.print("\n    id 'org.parchmentmc.librarian.forgegradle' version '1.+'")
    }

    if (props.useMixins) {
        out.print("\n    id 'org.spongepowered.mixin' version '0.7.+'")
    } %>
}

        <%
if (props.useMixins)
    out.println("""\nmixin {
    add sourceSets.main, '\${archivesName}.refmap.json'
    config '\${archivesName}.mixins.json'
    debug.export = true
}""") %>

            version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: \${System.getProperty 'java.version'}, JVM: \${System.getProperty 'java.vm.version'} (\${System.getProperty 'java.vendor'}), Arch: \${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

            <%
    if (props.genRunFolders) {
        out.print("\n    generateRunFolders = true")
    } %>

            <%
    if (props.useAccessTransformer) {
        out.print("\n    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')")
    } %>

            runs {
                configureEach {
                    workingDirectory project.file('run')

                    property 'forge.logging.markers', 'REGISTRIES'
                    property 'forge.logging.console.level', 'debug'

                    mods {
                        mod_id {
                            source sourceSets.main
                        }
                    }
                }

                client {
                    property 'forge.enabledGameTestNamespaces', mod_id
                }

                server {
                    property 'forge.enabledGameTestNamespaces', mod_id
                    args '--nogui'
                }

                gameTestServer {
                    property 'forge.enabledGameTestNamespaces', mod_id
                }

                data {
                    workingDirectory project.file('run-data')

                    args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
                }
            }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft "net.minecraftforge:forge:\${minecraft_version}-\${forge_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-\${minecraft_version}-common-api:\${jei_version}"
    // compileOnly "mezz.jei:jei-\${minecraft_version}-forge-api:\${jei_version}"
    // runtimeOnly "mezz.jei:jei-\${minecraft_version}-forge:\${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-\${minecraft_version}-\${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-\${minecraft_version}:\${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    final manifestAttributes = [
            'Specification-Title'   : mod_id,
            'Specification-Vendor'  : mod_authors,
            'Specification-Version' : '1',
            'Implementation-Title'  : project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor' : mod_authors
    ]

            <%
    if (props.useMixins) {
        out.println("manifestAttributes.put('MixinConfigs', '\${archivesName}.mixins.json')")
    } %>

            manifest {
                attributes(manifestAttributes)
            }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://\${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
